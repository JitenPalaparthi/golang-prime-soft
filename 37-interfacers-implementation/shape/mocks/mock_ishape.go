// Code generated by MockGen. DO NOT EDIT.
// Source: shape/shape.go
//
// Generated by this command:
//
//	mockgen -source=shape/shape.go -destination=shape/mocks/mock_ishape.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIShape is a mock of IShape interface.
type MockIShape struct {
	ctrl     *gomock.Controller
	recorder *MockIShapeMockRecorder
	isgomock struct{}
}

// MockIShapeMockRecorder is the mock recorder for MockIShape.
type MockIShapeMockRecorder struct {
	mock *MockIShape
}

// NewMockIShape creates a new mock instance.
func NewMockIShape(ctrl *gomock.Controller) *MockIShape {
	mock := &MockIShape{ctrl: ctrl}
	mock.recorder = &MockIShapeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShape) EXPECT() *MockIShapeMockRecorder {
	return m.recorder
}

// Area mocks base method.
func (m *MockIShape) Area() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Area")
	ret0, _ := ret[0].(float32)
	return ret0
}

// Area indicates an expected call of Area.
func (mr *MockIShapeMockRecorder) Area() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Area", reflect.TypeOf((*MockIShape)(nil).Area))
}

// Perimeter mocks base method.
func (m *MockIShape) Perimeter() float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perimeter")
	ret0, _ := ret[0].(float32)
	return ret0
}

// Perimeter indicates an expected call of Perimeter.
func (mr *MockIShapeMockRecorder) Perimeter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perimeter", reflect.TypeOf((*MockIShape)(nil).Perimeter))
}

// What mocks base method.
func (m *MockIShape) What() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "What")
	ret0, _ := ret[0].(string)
	return ret0
}

// What indicates an expected call of What.
func (mr *MockIShapeMockRecorder) What() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "What", reflect.TypeOf((*MockIShape)(nil).What))
}

// MockIWhat is a mock of IWhat interface.
type MockIWhat struct {
	ctrl     *gomock.Controller
	recorder *MockIWhatMockRecorder
	isgomock struct{}
}

// MockIWhatMockRecorder is the mock recorder for MockIWhat.
type MockIWhatMockRecorder struct {
	mock *MockIWhat
}

// NewMockIWhat creates a new mock instance.
func NewMockIWhat(ctrl *gomock.Controller) *MockIWhat {
	mock := &MockIWhat{ctrl: ctrl}
	mock.recorder = &MockIWhatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWhat) EXPECT() *MockIWhatMockRecorder {
	return m.recorder
}

// What mocks base method.
func (m *MockIWhat) What() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "What")
	ret0, _ := ret[0].(string)
	return ret0
}

// What indicates an expected call of What.
func (mr *MockIWhatMockRecorder) What() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "What", reflect.TypeOf((*MockIWhat)(nil).What))
}
